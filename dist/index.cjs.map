{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport initCore, { sfsConfig, UploadedFile } from \"sfs-node\";\r\n\r\nexport default function initFunctions({\r\n  publicFolder,\r\n  mask,\r\n  getFileById,\r\n  getFileByHash,\r\n  createFile,\r\n  logger,\r\n  allowDuplicates,\r\n}: sfsConfig) {\r\n  const {\r\n    resolveFilePath,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    getDiskUsage,\r\n  } = initCore({\r\n    publicFolder,\r\n    mask,\r\n    getFileById,\r\n    getFileByHash,\r\n    createFile,\r\n    logger,\r\n    allowDuplicates,\r\n  });\r\n\r\n  const optimisticUrls = new Set();\r\n\r\n  const getFile = async (req: Request, res: Response) => {\r\n    const fullUrl = req.protocol + \"://\" + req.get(\"host\") + req.originalUrl;\r\n    console.log(fullUrl);\r\n    console.log(optimisticUrls);\r\n\r\n    if (optimisticUrls.has(fullUrl)) {\r\n      return res.status(425);\r\n    }\r\n    const fileId = urlToId(fullUrl);\r\n    try {\r\n      const { filePath, fileName } = await resolveFilePath(fileId);\r\n      res.setHeader(\"Content-Disposition\", `inline; filename=\"${fileName}\"`);\r\n      return res.status(200).sendFile(filePath);\r\n    } catch (err) {\r\n      return res.status(404).send();\r\n    }\r\n  };\r\n\r\n  const uploadFile = async (\r\n    req,\r\n    res: Response,\r\n    options: {\r\n      pathParamKey: string;\r\n      fileParamKey: string;\r\n      optimisticIdKey: string;\r\n    } = {\r\n      pathParamKey: \"path\",\r\n      fileParamKey: \"file\",\r\n      optimisticIdKey: \"id\",\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey, fileParamKey, optimisticIdKey } = options;\r\n    const file = req.files[fileParamKey];\r\n    const path = req.body[pathParamKey];\r\n    const id = req.body[optimisticIdKey];\r\n    let optimisticUrl;\r\n    try {\r\n      if (id) {\r\n        optimisticUrl = idToUrl(id);\r\n        optimisticUrls.add(optimisticUrl);\r\n      }\r\n      const fileInfo = await saveFile(file, path, id);\r\n      if (fileInfo && optimisticUrl) {\r\n        optimisticUrls.delete(optimisticUrl); // Delete the URL, not the id\r\n      }\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      console.error(err);\r\n      if (optimisticUrl) {\r\n        optimisticUrls.delete(optimisticUrl); // Delete the URL, not the id\r\n      }\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const uploadFiles = async (\r\n    req,\r\n    res: Response,\r\n    options: { pathParamKey: string } = {\r\n      pathParamKey: \"path\",\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey } = options;\r\n\r\n    try {\r\n      const path = req.body[pathParamKey];\r\n      const files = req.files;\r\n      const allFiles: UploadedFile[] = [];\r\n\r\n      Object.values(files).forEach((file) => {\r\n        if (Array.isArray(file)) {\r\n          allFiles.push(...file);\r\n        } else {\r\n          // @ts-ignore\r\n          allFiles.push(file);\r\n        }\r\n      });\r\n\r\n      const fileInfo = await Promise.all(\r\n        allFiles.map((file) => saveFile(file, path))\r\n      );\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      console.error(err);\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const deleteFile = async (req, res) => {\r\n    try {\r\n      const fullUrl = req.protocol + \"://\" + req.get(\"host\") + req.originalUrl;\r\n      const fileId = urlToId(fullUrl);\r\n      await deleteFileById(fileId);\r\n      return res.status(200).send(\"ok\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  return {\r\n    getFile,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    deleteFile,\r\n    getDiskUsage,\r\n    uploadFile,\r\n    uploadFiles,\r\n  };\r\n}\r\n"],"names":["_ref","_initCore","initCore","publicFolder","mask","getFileById","getFileByHash","createFile","logger","allowDuplicates","resolveFilePath","idToUrl","urlToId","saveFile","deleteFileByHash","deleteFileById","getDiskUsage","optimisticUrls","Set","getFile","req","res","fullUrl","protocol","get","originalUrl","console","log","has","Promise","resolve","status","fileId","_catch","then","_ref2","filePath","setHeader","fileName","sendFile","send","e","reject","deleteFile","err","error","uploadFile","options","pathParamKey","fileParamKey","optimisticIdKey","files","optimisticUrl","file","path","body","id","add","fileInfo","uploadFiles","allFiles","Object","values","forEach","Array","isArray","push","apply","all","map"],"mappings":"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"}