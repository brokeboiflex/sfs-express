import e from"sfs-node";function r(e,r){try{var t=e()}catch(e){return r(e)}return t&&t.then?t.then(void 0,r):t}function t(t){var n=e({publicFolder:t.publicFolder,mask:t.mask,getFileById:t.getFileById,getFileByHash:t.getFileByHash,createFile:t.createFile,logger:t.logger,allowDuplicates:t.allowDuplicates}),o=n.resolveFilePath,s=n.idToUrl,i=n.urlToId,l=n.saveFile,a=n.deleteFileByHash,u=n.deleteFileById,c=n.getDiskUsage,d=new Set;return{getFile:function(e,t){try{var n=e.protocol+"://"+e.get("host")+e.originalUrl;if(console.log(n),console.log(d),d.has(n))return Promise.resolve(t.status(425));var s=i(n);return Promise.resolve(r(function(){return Promise.resolve(o(s)).then(function(e){var r=e.filePath;return t.setHeader("Content-Disposition",'inline; filename="'+e.fileName+'"'),t.status(200).sendFile(r)})},function(){return t.status(404).send()}))}catch(e){return Promise.reject(e)}},idToUrl:s,urlToId:i,saveFile:l,deleteFileByHash:a,deleteFileById:u,deleteFile:function(e,t){try{return Promise.resolve(r(function(){var r=e.protocol+"://"+e.get("host")+e.originalUrl,n=i(r);return Promise.resolve(u(n)).then(function(){return t.status(200).send("ok")})},function(e){return console.error(e),t.status(500).send()}))}catch(e){return Promise.reject(e)}},getDiskUsage:c,uploadFile:function(e,t,n){void 0===n&&(n={pathParamKey:"path",fileParamKey:"file",optimisticIdKey:"id"});try{if(!e.files)return Promise.resolve(t.status(400).send("Request doesn't contain any files"));var o,i=e.files[n.fileParamKey],a=e.body[n.pathParamKey],u=e.body[n.optimisticIdKey];return Promise.resolve(r(function(){return u&&(o=s(u),d.add(o)),Promise.resolve(l(i,a,u)).then(function(e){return e&&o&&d.delete(o),t.status(200).send(e)})},function(e){return console.error(e),o&&d.delete(o),t.status(500).send()}))}catch(e){return Promise.reject(e)}},uploadFiles:function(e,t,n){void 0===n&&(n={pathParamKey:"path"});try{if(!e.files)return Promise.resolve(t.status(400).send("Request doesn't contain any files"));var o=n.pathParamKey;return Promise.resolve(r(function(){var r=e.body[o],n=[];return Object.values(e.files).forEach(function(e){Array.isArray(e)?n.push.apply(n,e):n.push(e)}),Promise.resolve(Promise.all(n.map(function(e){return l(e,r)}))).then(function(e){return t.status(200).send(e)})},function(e){return console.error(e),t.status(500).send()}))}catch(e){return Promise.reject(e)}}}}export{t as default};
//# sourceMappingURL=index.esm.js.map
