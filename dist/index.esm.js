import e from"sfs-node";function r(e,r){try{var t=e()}catch(e){return r(e)}return t&&t.then?t.then(void 0,r):t}function t(t){var s=e({publicFolder:t.publicFolder,mask:t.mask,getFileById:t.getFileById,getFileByHash:t.getFileByHash,createFile:t.createFile,logger:t.logger,allowDuplicates:t.allowDuplicates}),n=s.resolveFilePath,o=s.idToUrl,i=s.urlToId,a=s.saveFile,l=s.deleteFileByHash,u=s.deleteFileById,c=s.getDiskUsage,d=new Set;return{getFile:function(e,t){try{var s=e.protocol+"://"+e.get("host")+e.originalUrl;if(d.has(s))return Promise.resolve(t.status(425));var o=i(s);return Promise.resolve(r(function(){return Promise.resolve(n(o)).then(function(e){var r=e.filePath;return t.setHeader("Content-Disposition",'inline; filename="'+e.fileName+'"'),t.status(200).sendFile(r)})},function(){return t.status(404).send()}))}catch(e){return Promise.reject(e)}},idToUrl:o,urlToId:i,saveFile:a,prepareOptimisticUpload:function(e,r){try{var t=i(e.body.id);try{return d.add(t),Promise.resolve(r.status(200).send(t))}catch(e){return console.error(e),Promise.resolve(r.status(500).send())}}catch(e){return Promise.reject(e)}},deleteFileByHash:l,deleteFileById:u,deleteFile:function(e,t){try{return Promise.resolve(r(function(){var r=e.protocol+"://"+e.get("host")+e.originalUrl,s=i(r);return Promise.resolve(u(s)).then(function(){return t.status(200).send("ok")})},function(e){return console.error(e),t.status(500).send()}))}catch(e){return Promise.reject(e)}},getDiskUsage:c,uploadFile:function(e,t,s){void 0===s&&(s={pathParamKey:"path",fileParamKey:"file",optimisticIdKey:"id"});try{if(!e.files)return Promise.resolve(t.status(400).send("Request doesn't contain any files"));var n,i=e.files[s.fileParamKey],l=e.body[s.pathParamKey],u=e.body[s.optimisticIdKey];return Promise.resolve(r(function(){return u&&(n=o(u)),Promise.resolve(a(i,l,u)).then(function(e){return e&&n&&d.delete(n),t.status(200).send(e)})},function(e){return console.error(e),n&&d.delete(n),t.status(500).send()}))}catch(e){return Promise.reject(e)}},uploadFiles:function(e,t,s){void 0===s&&(s={pathParamKey:"path"});try{if(!e.files)return Promise.resolve(t.status(400).send("Request doesn't contain any files"));var n=s.pathParamKey;return Promise.resolve(r(function(){var r=e.body[n],s=[];return Object.values(e.files).forEach(function(e){Array.isArray(e)?s.push.apply(s,e):s.push(e)}),Promise.resolve(Promise.all(s.map(function(e){return a(e,r)}))).then(function(e){return t.status(200).send(e)})},function(e){return console.error(e),t.status(500).send()}))}catch(e){return Promise.reject(e)}}}}export{t as default};
//# sourceMappingURL=index.esm.js.map
