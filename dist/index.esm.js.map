{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport initCore, { sfsConfig, UploadedFile } from \"sfs-node\";\r\n\r\nexport default function initFunctions({\r\n  publicFolder,\r\n  mask,\r\n  getFileById,\r\n  getFileByHash,\r\n  createFile,\r\n  logger,\r\n  allowDuplicates,\r\n}: sfsConfig) {\r\n  const {\r\n    resolveFilePath,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    getDiskUsage,\r\n  } = initCore({\r\n    publicFolder,\r\n    mask,\r\n    getFileById,\r\n    getFileByHash,\r\n    createFile,\r\n    logger,\r\n    allowDuplicates,\r\n  });\r\n\r\n  const optimisticUrls = new Set();\r\n\r\n  const getFile = async (req: Request, res: Response) => {\r\n    const fullUrl = req.protocol + \"://\" + req.get(\"host\") + req.originalUrl;\r\n    if (optimisticUrls.has(fullUrl)) {\r\n      return res.status(425);\r\n    }\r\n    const fileId = urlToId(fullUrl);\r\n    try {\r\n      const { filePath, fileName } = await resolveFilePath(fileId);\r\n      res.setHeader(\"Content-Disposition\", `inline; filename=\"${fileName}\"`);\r\n      return res.status(200).sendFile(filePath);\r\n    } catch (err) {\r\n      return res.status(404).send();\r\n    }\r\n  };\r\n\r\n  const prepareOptimisticUpload = async (req, res) => {\r\n    const id = req.body.id;\r\n    const optimisticUrl = urlToId(id);\r\n    try {\r\n      optimisticUrls.add(optimisticUrl);\r\n      return res.status(200).send(optimisticUrl);\r\n    } catch (err) {\r\n      console.error(err);\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const uploadFile = async (\r\n    req,\r\n    res: Response,\r\n    options: {\r\n      pathParamKey: string;\r\n      fileParamKey: string;\r\n      optimisticIdKey: string;\r\n    } = {\r\n      pathParamKey: \"path\",\r\n      fileParamKey: \"file\",\r\n      optimisticIdKey: \"id\",\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey, fileParamKey, optimisticIdKey } = options;\r\n    const file = req.files[fileParamKey];\r\n    const path = req.body[pathParamKey];\r\n    const id = req.body[optimisticIdKey];\r\n    let optimisticUrl;\r\n    try {\r\n      if (id) {\r\n        optimisticUrl = idToUrl(id);\r\n      }\r\n      const fileInfo = await saveFile(file, path, id);\r\n      if (fileInfo && optimisticUrl) {\r\n        optimisticUrls.delete(optimisticUrl); // Delete the URL, not the id\r\n      }\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      console.error(err);\r\n      if (optimisticUrl) {\r\n        optimisticUrls.delete(optimisticUrl); // Delete the URL, not the id\r\n      }\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const uploadFiles = async (\r\n    req,\r\n    res: Response,\r\n    options: { pathParamKey: string } = {\r\n      pathParamKey: \"path\",\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey } = options;\r\n\r\n    try {\r\n      const path = req.body[pathParamKey];\r\n      const files = req.files;\r\n      const allFiles: UploadedFile[] = [];\r\n\r\n      Object.values(files).forEach((file) => {\r\n        if (Array.isArray(file)) {\r\n          allFiles.push(...file);\r\n        } else {\r\n          // @ts-ignore\r\n          allFiles.push(file);\r\n        }\r\n      });\r\n\r\n      const fileInfo = await Promise.all(\r\n        allFiles.map((file) => saveFile(file, path))\r\n      );\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      console.error(err);\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const deleteFile = async (req, res) => {\r\n    try {\r\n      const fullUrl = req.protocol + \"://\" + req.get(\"host\") + req.originalUrl;\r\n      const fileId = urlToId(fullUrl);\r\n      await deleteFileById(fileId);\r\n      return res.status(200).send(\"ok\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  return {\r\n    getFile,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    prepareOptimisticUpload,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    deleteFile,\r\n    getDiskUsage,\r\n    uploadFile,\r\n    uploadFiles,\r\n  };\r\n}\r\n"],"names":["initFunctions","_ref","_initCore","initCore","publicFolder","mask","getFileById","getFileByHash","createFile","logger","allowDuplicates","resolveFilePath","idToUrl","urlToId","saveFile","deleteFileByHash","deleteFileById","getDiskUsage","optimisticUrls","Set","getFile","req","res","fullUrl","protocol","get","originalUrl","has","Promise","resolve","status","fileId","_catch","then","_ref2","filePath","setHeader","fileName","sendFile","send","e","reject","prepareOptimisticUpload","optimisticUrl","body","id","add","err","console","error","deleteFile","uploadFile","options","pathParamKey","fileParamKey","optimisticIdKey","files","file","path","fileInfo","uploadFiles","allFiles","Object","values","forEach","Array","isArray","push","apply","all","map"],"mappings":"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"}