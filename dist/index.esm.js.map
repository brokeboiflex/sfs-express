{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport initCore, { sfsConfig, UploadedFile } from \"sfs-node\";\r\n\r\nexport default function initFunctions({\r\n  publicFolder,\r\n  mask,\r\n  getFileById,\r\n  getFileByHash,\r\n  createFile,\r\n  logger,\r\n  allowDuplicates,\r\n}: sfsConfig) {\r\n  const {\r\n    resolveFilePath,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    getDiskUsage,\r\n  } = initCore({\r\n    publicFolder,\r\n    mask,\r\n    getFileById,\r\n    getFileByHash,\r\n    createFile,\r\n    logger,\r\n    allowDuplicates,\r\n  });\r\n\r\n  const optimisticUrls = new Set();\r\n\r\n  const getFile = async (req: Request, res: Response) => {\r\n    let fullUrl;\r\n    try {\r\n      const id = req.params.id;\r\n      fullUrl = idToUrl(id);\r\n      logger &&\r\n        logger(\r\n          \"SFS Express: trying to return requested file: \" + fullUrl,\r\n          \"info\"\r\n        );\r\n      if (optimisticUrls.has(fullUrl)) {\r\n        return res.status(428);\r\n      }\r\n      const fileId = urlToId(fullUrl);\r\n      const { filePath, fileName } = await resolveFilePath(fileId);\r\n      logger &&\r\n        logger(\r\n          `SFS Express: sedning file '${fileName}' with path '${filePath}'`\r\n        );\r\n\r\n      res.setHeader(\"Content-Disposition\", `inline; filename=\"${fileName}\"`);\r\n      return res.status(200).sendFile(filePath);\r\n    } catch (err) {\r\n      logger && logger(\"SFS Express: unable to return file:\" + fullUrl);\r\n      logger && logger(err);\r\n\r\n      return res.status(404).send();\r\n    }\r\n  };\r\n\r\n  const prepareOptimisticUpload = async (req, res) => {\r\n    const id = req.body.id;\r\n    const optimisticUrl = idToUrl(id);\r\n    try {\r\n      optimisticUrls.add(optimisticUrl);\r\n      return res.status(200).send(optimisticUrl);\r\n    } catch (err) {\r\n      logger && logger(err, \"error\");\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const uploadFile = async (\r\n    req,\r\n    res: Response,\r\n    options: {\r\n      pathParamKey: string;\r\n      fileParamKey: string;\r\n      optimisticIdKey: string;\r\n      additionalFields: any;\r\n    } = {\r\n      pathParamKey: \"path\",\r\n      fileParamKey: \"file\",\r\n      optimisticIdKey: \"id\",\r\n      additionalFields: {},\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey, fileParamKey, optimisticIdKey, additionalFields } =\r\n      options;\r\n    const file = req.files[fileParamKey];\r\n    const path = req.body[pathParamKey];\r\n    const id = req.body[optimisticIdKey];\r\n    let optimisticUrl;\r\n    try {\r\n      if (id) {\r\n        optimisticUrl = idToUrl(id);\r\n      }\r\n      const fileInfo = await saveFile(file, {\r\n        filePath: path,\r\n        id,\r\n        additionalFields,\r\n      });\r\n      if (fileInfo && optimisticUrl) {\r\n        optimisticUrls.delete(optimisticUrl); // Delete the URL, not the id\r\n      }\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      logger && logger(err, \"error\");\r\n\r\n      if (optimisticUrl) {\r\n        optimisticUrls.delete(optimisticUrl); // Delete the URL, not the id\r\n      }\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const uploadFiles = async (\r\n    req,\r\n    res: Response,\r\n    options: { pathParamKey: string } = {\r\n      pathParamKey: \"path\",\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey } = options;\r\n\r\n    try {\r\n      const path = req.body[pathParamKey];\r\n      const files = req.files;\r\n      const allFiles: UploadedFile[] = [];\r\n\r\n      Object.values(files).forEach((file) => {\r\n        if (Array.isArray(file)) {\r\n          allFiles.push(...file);\r\n        } else {\r\n          // @ts-ignore\r\n          allFiles.push(file);\r\n        }\r\n      });\r\n\r\n      const fileInfo = await Promise.all(\r\n        allFiles.map((file) => saveFile(file, path))\r\n      );\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      logger && logger(err, \"error\");\r\n\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const deleteFile = async (req, res) => {\r\n    try {\r\n      const id = req.params.id;\r\n      const fullUrl = idToUrl(id);\r\n      const fileId = urlToId(fullUrl);\r\n      await deleteFileById(fileId);\r\n      return res.status(200).send(\"ok\");\r\n    } catch (err) {\r\n      logger && logger(err, \"error\");\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  return {\r\n    getFile,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    prepareOptimisticUpload,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    deleteFile,\r\n    getDiskUsage,\r\n    uploadFile,\r\n    uploadFiles,\r\n  };\r\n}\r\n"],"names":["initFunctions","_ref","logger","_initCore","initCore","publicFolder","mask","getFileById","getFileByHash","createFile","allowDuplicates","resolveFilePath","idToUrl","urlToId","saveFile","deleteFileByHash","deleteFileById","getDiskUsage","optimisticUrls","Set","getFile","req","res","fullUrl","Promise","resolve","_catch","params","id","has","status","fileId","then","_ref2","filePath","fileName","setHeader","sendFile","err","send","e","reject","prepareOptimisticUpload","optimisticUrl","body","add","deleteFile","uploadFile","options","pathParamKey","fileParamKey","optimisticIdKey","additionalFields","files","file","path","fileInfo","uploadFiles","allFiles","Object","values","forEach","Array","isArray","push","apply","all","map"],"mappings":"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"}