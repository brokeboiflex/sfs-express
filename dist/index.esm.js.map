{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport initCore, { sfsConfig, UploadedFile } from \"sfs-node\";\r\n\r\nexport default function initFunctions({\r\n  publicFolder,\r\n  mask,\r\n  getFileById,\r\n  getFileByHash,\r\n  createFile,\r\n  logger,\r\n  allowDuplicates,\r\n}: sfsConfig) {\r\n  const {\r\n    resolveFilePath,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    getDiskUsage,\r\n  } = initCore({\r\n    publicFolder,\r\n    mask,\r\n    getFileById,\r\n    getFileByHash,\r\n    createFile,\r\n    logger,\r\n    allowDuplicates,\r\n  });\r\n\r\n  const optimisticUrls = new Set();\r\n\r\n  const getFile = async (req: Request, res: Response) => {\r\n    const fullUrl = req.protocol + \"://\" + req.get(\"host\") + req.originalUrl;\r\n    logger &&\r\n      logger(\"SFS Express: trying to return requested file: \" + fullUrl);\r\n    if (optimisticUrls.has(fullUrl)) {\r\n      return res.status(428);\r\n    }\r\n    const fileId = urlToId(fullUrl);\r\n    try {\r\n      const { filePath, fileName } = await resolveFilePath(fileId);\r\n      logger &&\r\n        logger(\r\n          \"SFS Express: sedning file '\" +\r\n            fileName +\r\n            \"' with path '\" +\r\n            filePath +\r\n            \"'\"\r\n        );\r\n\r\n      res.setHeader(\"Content-Disposition\", `inline; filename=\"${fileName}\"`);\r\n      return res.status(200).sendFile(filePath);\r\n    } catch (err) {\r\n      logger && logger(\"SFS Express: unable to return file\" + fullUrl);\r\n      logger && logger(err);\r\n\r\n      console.error(err);\r\n      return res.status(404).send();\r\n    }\r\n  };\r\n\r\n  const prepareOptimisticUpload = async (req, res) => {\r\n    const id = req.body.id;\r\n    const optimisticUrl = idToUrl(id);\r\n    try {\r\n      optimisticUrls.add(optimisticUrl);\r\n      return res.status(200).send(optimisticUrl);\r\n    } catch (err) {\r\n      console.error(err);\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const uploadFile = async (\r\n    req,\r\n    res: Response,\r\n    options: {\r\n      pathParamKey: string;\r\n      fileParamKey: string;\r\n      optimisticIdKey: string;\r\n    } = {\r\n      pathParamKey: \"path\",\r\n      fileParamKey: \"file\",\r\n      optimisticIdKey: \"id\",\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey, fileParamKey, optimisticIdKey } = options;\r\n    const file = req.files[fileParamKey];\r\n    const path = req.body[pathParamKey];\r\n    const id = req.body[optimisticIdKey];\r\n    let optimisticUrl;\r\n    try {\r\n      if (id) {\r\n        optimisticUrl = idToUrl(id);\r\n      }\r\n      const fileInfo = await saveFile(file, path, id);\r\n      if (fileInfo && optimisticUrl) {\r\n        optimisticUrls.delete(optimisticUrl); // Delete the URL, not the id\r\n      }\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      console.error(err);\r\n      if (optimisticUrl) {\r\n        optimisticUrls.delete(optimisticUrl); // Delete the URL, not the id\r\n      }\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const uploadFiles = async (\r\n    req,\r\n    res: Response,\r\n    options: { pathParamKey: string } = {\r\n      pathParamKey: \"path\",\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey } = options;\r\n\r\n    try {\r\n      const path = req.body[pathParamKey];\r\n      const files = req.files;\r\n      const allFiles: UploadedFile[] = [];\r\n\r\n      Object.values(files).forEach((file) => {\r\n        if (Array.isArray(file)) {\r\n          allFiles.push(...file);\r\n        } else {\r\n          // @ts-ignore\r\n          allFiles.push(file);\r\n        }\r\n      });\r\n\r\n      const fileInfo = await Promise.all(\r\n        allFiles.map((file) => saveFile(file, path))\r\n      );\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      console.error(err);\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const deleteFile = async (req, res) => {\r\n    try {\r\n      const fullUrl = req.protocol + \"://\" + req.get(\"host\") + req.originalUrl;\r\n      const fileId = urlToId(fullUrl);\r\n      await deleteFileById(fileId);\r\n      return res.status(200).send(\"ok\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  return {\r\n    getFile,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    prepareOptimisticUpload,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    deleteFile,\r\n    getDiskUsage,\r\n    uploadFile,\r\n    uploadFiles,\r\n  };\r\n}\r\n"],"names":["initFunctions","_ref","logger","_initCore","initCore","publicFolder","mask","getFileById","getFileByHash","createFile","allowDuplicates","resolveFilePath","idToUrl","urlToId","saveFile","deleteFileByHash","deleteFileById","getDiskUsage","optimisticUrls","Set","getFile","req","res","fullUrl","protocol","get","originalUrl","has","Promise","resolve","status","fileId","_catch","then","_ref2","filePath","fileName","setHeader","sendFile","err","console","error","send","e","reject","prepareOptimisticUpload","optimisticUrl","body","id","add","deleteFile","uploadFile","options","pathParamKey","fileParamKey","optimisticIdKey","files","file","path","fileInfo","uploadFiles","allFiles","Object","values","forEach","Array","isArray","push","apply","all","map"],"mappings":"+GAGc,SAAUA,EAAaC,GACnC,IAKAC,EAAMD,EAANC,OAGAC,EAQIC,EAAS,CACXC,aAjBUJ,EAAZI,aAkBEC,KAjBEL,EAAJK,KAkBEC,YAjBSN,EAAXM,YAkBEC,cAjBWP,EAAbO,cAkBEC,WAjBQR,EAAVQ,WAkBEP,OAAAA,EACAQ,gBAjBaT,EAAfS,kBAGEC,EAAeR,EAAfQ,gBACAC,EAAOT,EAAPS,QACAC,EAAOV,EAAPU,QACAC,EAAQX,EAARW,SACAC,EAAgBZ,EAAhBY,iBACAC,EAAcb,EAAda,eACAC,EAAYd,EAAZc,aAWIC,EAAiB,IAAIC,IAmI3B,MAAO,CACLC,QAlII,SAAiBC,EAAcC,GAAiB,IACpD,IAAMC,EAAUF,EAAIG,SAAW,MAAQH,EAAII,IAAI,QAAUJ,EAAIK,YAG7D,GAFAxB,GACEA,EAAO,iDAAmDqB,GACxDL,EAAeS,IAAIJ,GACrB,OAAAK,QAAAC,QAAOP,EAAIQ,OAAO,MAEpB,IAAMC,EAASlB,EAAQU,GAAS,OAAAK,QAAAC,QAAAG,EAC5B,WAAA,OAAAJ,QAAAC,QACmClB,EAAgBoB,IAAOE,cAAAC,GAAA,IAApDC,EAAQD,EAARC,SAAUC,EAAQF,EAARE,SAWlB,OAVAlC,GACEA,EACE,8BACEkC,EACA,gBACAD,EACA,KAGNb,EAAIe,UAAU,sBAAqB,qBAAuBD,EAAQ,KAC3Dd,EAAIQ,OAAO,KAAKQ,SAASH,EAAU,EAC5C,EAASI,SAAAA,GAKP,OAJArC,GAAUA,EAAO,qCAAuCqB,GACxDrB,GAAUA,EAAOqC,GAEjBC,QAAQC,MAAMF,GACPjB,EAAIQ,OAAO,KAAKY,MACzB,GACF,CAAC,MAAAC,GAAAf,OAAAA,QAAAgB,OAAAD,EAAA,CAAA,EAuGC/B,QAAAA,EACAC,QAAAA,EACAC,SAAAA,EACA+B,wBAxG2B,SAAUxB,EAAKC,GAAO,IACjD,IACMwB,EAAgBlC,EADXS,EAAI0B,KAAKC,IAEpB,IAEE,OADA9B,EAAe+B,IAAIH,GACnBlB,QAAAC,QAAOP,EAAIQ,OAAO,KAAKY,KAAKI,GAC9B,CAAE,MAAOP,GAEP,OADAC,QAAQC,MAAMF,GACdX,QAAAC,QAAOP,EAAIQ,OAAO,KAAKY,OACzB,CACF,CAAC,MAAAC,GAAAf,OAAAA,QAAAgB,OAAAD,EAED,CAAA,EA6FE5B,iBAAAA,EACAC,eAAAA,EACAkC,WApBc,SAAU7B,EAAKC,GAAO,IAAA,OAAAM,QAAAC,QAAAG,EAAA,WAElC,IAAMT,EAAUF,EAAIG,SAAW,MAAQH,EAAII,IAAI,QAAUJ,EAAIK,YACvDK,EAASlB,EAAQU,GAAS,OAAAK,QAAAC,QAC1Bb,EAAee,IAAOE,KAAA,WAC5B,OAAOX,EAAIQ,OAAO,KAAKY,KAAK,KAAM,EACpC,EAASH,SAAAA,GAEP,OADAC,QAAQC,MAAMF,GACPjB,EAAIQ,OAAO,KAAKY,MACzB,GACF,CAAC,MAAAC,GAAAf,OAAAA,QAAAgB,OAAAD,EAED,CAAA,EASE1B,aAAAA,EACAkC,WAjGc,SACd9B,EACAC,EACA8B,QAAAA,IAAAA,IAAAA,EAII,CACFC,aAAc,OACdC,aAAc,OACdC,gBAAiB,OAClB,IAED,IAAKlC,EAAImC,MACP,OAAA5B,QAAAC,QAAOP,EAAIQ,OAAO,KAAKY,KAAK,sCAE9B,IAIII,EAHEW,EAAOpC,EAAImC,MADuCJ,EAAlCE,cAEhBI,EAAOrC,EAAI0B,KAFuCK,EAAhDC,cAGFL,EAAK3B,EAAI0B,KAHyCK,EAApBG,iBAIlB,OAAA3B,QAAAC,QAAAG,EAAA,WAIf,OAFGgB,IACFF,EAAgBlC,EAAQoC,IACzBpB,QAAAC,QACsBf,EAAS2C,EAAMC,EAAMV,IAAGf,KAAzC0B,SAAAA,GAIN,OAHIA,GAAYb,GACd5B,EAAc,OAAQ4B,GAEjBxB,EAAIQ,OAAO,KAAKY,KAAKiB,EAAU,EACxC,EAASpB,SAAAA,GAKP,OAJAC,QAAQC,MAAMF,GACVO,GACF5B,EAAc,OAAQ4B,GAEjBxB,EAAIQ,OAAO,KAAKY,MACzB,GACF,CAAC,MAAAC,GAAAf,OAAAA,QAAAgB,OAAAD,EAAA,CAAA,EA6DCiB,YA3De,SACfvC,EACAC,EACA8B,YAAAA,IAAAA,EAAoC,CAClCC,aAAc,SACf,IAED,IAAKhC,EAAImC,MACP,OAAA5B,QAAAC,QAAOP,EAAIQ,OAAO,KAAKY,KAAK,sCAE9B,IAAQW,EAAiBD,EAAjBC,aAAyB,OAAAzB,QAAAC,QAAAG,EAE7B,WACF,IAAM0B,EAAOrC,EAAI0B,KAAKM,GAEhBQ,EAA2B,GAS9B,OAPHC,OAAOC,OAHO1C,EAAImC,OAGGQ,QAAQ,SAACP,GACxBQ,MAAMC,QAAQT,GAChBI,EAASM,KAAIC,MAAbP,EAAiBJ,GAGjBI,EAASM,KAAKV,EAElB,GAAG7B,QAAAC,QAEoBD,QAAQyC,IAC7BR,EAASS,IAAI,SAACb,GAAI,OAAK3C,EAAS2C,EAAMC,EAAK,KAC5CzB,KAAA,SAFK0B,GAGN,OAAOrC,EAAIQ,OAAO,KAAKY,KAAKiB,EAAU,EACxC,EAASpB,SAAAA,GAEP,OADAC,QAAQC,MAAMF,GACPjB,EAAIQ,OAAO,KAAKY,MACzB,GACF,CAAC,MAAAC,GAAAf,OAAAA,QAAAgB,OAAAD,EAED,CAAA,EAyBF"}