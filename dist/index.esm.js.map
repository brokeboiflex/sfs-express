{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport initCore, { sfsConfig, UploadedFile } from \"sfs-node\";\r\n\r\nexport default function initFunctions({\r\n  publicFolder,\r\n  mask,\r\n  getFileById,\r\n  getFileByHash,\r\n  createFile,\r\n  logger,\r\n}: sfsConfig) {\r\n  const {\r\n    resolveFilePath,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    getDiskUsage,\r\n  } = initCore({\r\n    publicFolder,\r\n    mask,\r\n    getFileById,\r\n    getFileByHash,\r\n    createFile,\r\n    logger,\r\n  });\r\n\r\n  const getFile = async (req: Request, res: Response) => {\r\n    const fullUrl = req.protocol + \"://\" + req.get(\"host\") + req.originalUrl;\r\n    const fileId = urlToId(fullUrl);\r\n    try {\r\n      const { filePath, fileName } = await resolveFilePath(fileId);\r\n      res.setHeader(\"Content-Disposition\", `inline; filename=\"${fileName}\"`);\r\n      res.status(200).sendFile(filePath);\r\n    } catch (err) {\r\n      throw new Error(err);\r\n    }\r\n  };\r\n\r\n  const uploadFile = async (\r\n    req,\r\n    res: Response,\r\n    options: {\r\n      pathParamKey: string;\r\n      fileParamKey: string;\r\n      optimisticId?: string;\r\n    } = {\r\n      pathParamKey: \"path\",\r\n      fileParamKey: \"file\",\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey, fileParamKey } = options;\r\n    try {\r\n      console.log(req.files);\r\n\r\n      const file = req.files[fileParamKey];\r\n      const path = req.body[pathParamKey];\r\n\r\n      const fileInfo = await saveFile(file, path, options.optimisticId);\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      throw new Error(err);\r\n    }\r\n  };\r\n\r\n  const uploadFiles = async (\r\n    req,\r\n    res: Response,\r\n    options: { pathParamKey: string } = {\r\n      pathParamKey: \"path\",\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey } = options;\r\n\r\n    try {\r\n      const path = req.body[pathParamKey];\r\n      const files = req.files;\r\n      const allFiles: UploadedFile[] = [];\r\n\r\n      Object.values(files).forEach((file) => {\r\n        if (Array.isArray(file)) {\r\n          allFiles.push(...file);\r\n        } else {\r\n          // @ts-ignore\r\n          allFiles.push(file);\r\n        }\r\n      });\r\n\r\n      const fileInfo = await Promise.all(\r\n        allFiles.map((file) => saveFile(file, path))\r\n      );\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      throw new Error(err);\r\n    }\r\n  };\r\n\r\n  const deleteFile = async (req, res) => {\r\n    try {\r\n      const fullUrl = req.protocol + \"://\" + req.get(\"host\") + req.originalUrl;\r\n      const fileId = urlToId(fullUrl);\r\n      await deleteFileById(fileId);\r\n      return res.status(200).send(\"ok\");\r\n    } catch (err) {\r\n      throw new Error(err);\r\n    }\r\n  };\r\n\r\n  return {\r\n    getFile,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    deleteFile,\r\n    getDiskUsage,\r\n    uploadFile,\r\n    uploadFiles,\r\n  };\r\n}\r\n"],"names":["initFunctions","_ref","_initCore","initCore","publicFolder","mask","getFileById","getFileByHash","createFile","logger","resolveFilePath","urlToId","saveFile","deleteFileById","getFile","req","res","fullUrl","protocol","get","originalUrl","fileId","Promise","resolve","_catch","then","_ref2","filePath","setHeader","fileName","status","sendFile","err","Error","e","reject","idToUrl","deleteFileByHash","deleteFile","send","getDiskUsage","uploadFile","options","pathParamKey","fileParamKey","files","console","log","body","optimisticId","fileInfo","uploadFiles","path","allFiles","Object","values","forEach","file","Array","isArray","push","apply","all","map"],"mappings":"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"}