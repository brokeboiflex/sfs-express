!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("sfs-node")):"function"==typeof define&&define.amd?define(["sfs-node"],t):(e||self).sfsExpress=t(e.sfsNode)}(this,function(e){function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var r=/*#__PURE__*/t(e);function i(e,t){try{var r=e()}catch(e){return t(e)}return r&&r.then?r.then(void 0,t):r}return function(e){var t=e.logger,n=r.default({publicFolder:e.publicFolder,mask:e.mask,getFileById:e.getFileById,getFileByHash:e.getFileByHash,createFile:e.createFile,logger:t,allowDuplicates:e.allowDuplicates}),s=n.resolveFilePath,o=n.idToUrl,a=n.urlToId,l=n.saveFile,u=n.deleteFileByHash,d=n.deleteFileById,f=n.getDiskUsage,c=new Set;return{getFile:function(e,r){try{var n;return Promise.resolve(i(function(){if(n=o(e.params.id),t&&t("SFS Express: trying to return requested file: "+n,"info"),c.has(n))return r.status(428);var i=a(n);return Promise.resolve(s(i)).then(function(e){var i=e.filePath,n=e.fileName;return t&&t("SFS Express: sedning file '"+n+"' with path '"+i+"'"),r.setHeader("Content-Disposition",'inline; filename="'+n+'"'),r.status(200).sendFile(i)})},function(e){return t&&t("SFS Express: unable to return file:"+n),t&&t(e),r.status(404).send()}))}catch(e){return Promise.reject(e)}},idToUrl:o,urlToId:a,saveFile:l,prepareOptimisticUpload:function(e,r){try{var i=o(e.body.id);try{return c.add(i),Promise.resolve(r.status(200).send(i))}catch(e){return t&&t(e,"error"),Promise.resolve(r.status(500).send())}}catch(e){return Promise.reject(e)}},deleteFileByHash:u,deleteFileById:d,deleteFile:function(e,r){try{return Promise.resolve(i(function(){var t=o(e.params.id),i=a(t);return Promise.resolve(d(i)).then(function(){return r.status(200).send("ok")})},function(e){return t&&t(e,"error"),r.status(500).send()}))}catch(e){return Promise.reject(e)}},getDiskUsage:f,uploadFile:function(e,r,n){void 0===n&&(n={pathParamKey:"path",fileParamKey:"file",optimisticIdKey:"id",additionalFields:{}});try{if(!e.files)return Promise.resolve(r.status(400).send("Request doesn't contain any files"));var s,a=n.additionalFields,u=e.files[n.fileParamKey],d=e.body[n.pathParamKey],f=e.body[n.optimisticIdKey];return Promise.resolve(i(function(){return f&&(s=o(f)),Promise.resolve(l(u,{filePath:d,id:f,additionalFields:a})).then(function(e){return e&&s&&c.delete(s),r.status(200).send(e)})},function(e){return t&&t(e,"error"),s&&c.delete(s),r.status(500).send()}))}catch(e){return Promise.reject(e)}},uploadFiles:function(e,r,n){void 0===n&&(n={pathParamKey:"path"});try{if(!e.files)return Promise.resolve(r.status(400).send("Request doesn't contain any files"));var s=n.pathParamKey;return Promise.resolve(i(function(){var t=e.body[s],i=[];return Object.values(e.files).forEach(function(e){Array.isArray(e)?i.push.apply(i,e):i.push(e)}),Promise.resolve(Promise.all(i.map(function(e){return l(e,t)}))).then(function(e){return r.status(200).send(e)})},function(e){return t&&t(e,"error"),r.status(500).send()}))}catch(e){return Promise.reject(e)}}}}});
//# sourceMappingURL=index.umd.js.map
