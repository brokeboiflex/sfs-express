{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport initCore, { sfsConfig, UploadedFile } from \"sfs-node\";\r\n\r\nexport default function initFunctions({\r\n  publicFolder,\r\n  mask,\r\n  getFileById,\r\n  getFileByHash,\r\n  createFile,\r\n  logger,\r\n}: sfsConfig) {\r\n  const {\r\n    resolveFilePath,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    getDiskUsage,\r\n  } = initCore({\r\n    publicFolder,\r\n    mask,\r\n    getFileById,\r\n    getFileByHash,\r\n    createFile,\r\n    logger,\r\n  });\r\n\r\n  const optimisticUrls = new Set();\r\n\r\n  const getFile = async (req: Request, res: Response) => {\r\n    const fullUrl = req.protocol + \"://\" + req.get(\"host\") + req.originalUrl;\r\n    if (optimisticUrls.has(fullUrl)) {\r\n      return res.status(425);\r\n    }\r\n    const fileId = urlToId(fullUrl);\r\n    try {\r\n      const { filePath, fileName } = await resolveFilePath(fileId);\r\n      res.setHeader(\"Content-Disposition\", `inline; filename=\"${fileName}\"`);\r\n      return res.status(200).sendFile(filePath);\r\n    } catch (err) {\r\n      return res.status(404).send();\r\n    }\r\n  };\r\n\r\n  const uploadFile = async (\r\n    req,\r\n    res: Response,\r\n    options: {\r\n      pathParamKey: string;\r\n      fileParamKey: string;\r\n      optimisticIdKey: string;\r\n    } = {\r\n      pathParamKey: \"path\",\r\n      fileParamKey: \"file\",\r\n      optimisticIdKey: \"id\",\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey, fileParamKey, optimisticIdKey } = options;\r\n    const file = req.files[fileParamKey];\r\n    const path = req.body[pathParamKey];\r\n    const id = req.body[optimisticIdKey];\r\n    try {\r\n      console.log(req.files);\r\n      id && optimisticUrls.add(idToUrl(id));\r\n      const fileInfo = await saveFile(file, path, id);\r\n      fileInfo && optimisticUrls.delete(id);\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      console.error(err);\r\n      optimisticUrls.delete(id);\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const uploadFiles = async (\r\n    req,\r\n    res: Response,\r\n    options: { pathParamKey: string } = {\r\n      pathParamKey: \"path\",\r\n    }\r\n  ) => {\r\n    if (!req.files) {\r\n      return res.status(400).send(\"Request doesn't contain any files\");\r\n    }\r\n    const { pathParamKey } = options;\r\n\r\n    try {\r\n      const path = req.body[pathParamKey];\r\n      const files = req.files;\r\n      const allFiles: UploadedFile[] = [];\r\n\r\n      Object.values(files).forEach((file) => {\r\n        if (Array.isArray(file)) {\r\n          allFiles.push(...file);\r\n        } else {\r\n          // @ts-ignore\r\n          allFiles.push(file);\r\n        }\r\n      });\r\n\r\n      const fileInfo = await Promise.all(\r\n        allFiles.map((file) => saveFile(file, path))\r\n      );\r\n      return res.status(200).send(fileInfo);\r\n    } catch (err) {\r\n      console.error(err);\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  const deleteFile = async (req, res) => {\r\n    try {\r\n      const fullUrl = req.protocol + \"://\" + req.get(\"host\") + req.originalUrl;\r\n      const fileId = urlToId(fullUrl);\r\n      await deleteFileById(fileId);\r\n      return res.status(200).send(\"ok\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      return res.status(500).send();\r\n    }\r\n  };\r\n\r\n  return {\r\n    getFile,\r\n    idToUrl,\r\n    urlToId,\r\n    saveFile,\r\n    deleteFileByHash,\r\n    deleteFileById,\r\n    deleteFile,\r\n    getDiskUsage,\r\n    uploadFile,\r\n    uploadFiles,\r\n  };\r\n}\r\n"],"names":["_ref","_initCore","initCore","publicFolder","mask","getFileById","getFileByHash","createFile","logger","resolveFilePath","idToUrl","urlToId","saveFile","deleteFileByHash","deleteFileById","getDiskUsage","optimisticUrls","Set","getFile","req","res","fullUrl","protocol","get","originalUrl","has","Promise","resolve","status","fileId","_catch","then","_ref2","filePath","setHeader","fileName","sendFile","send","e","reject","deleteFile","err","console","error","uploadFile","options","pathParamKey","fileParamKey","optimisticIdKey","files","file","path","body","id","log","add","fileInfo","uploadFiles","allFiles","Object","values","forEach","Array","isArray","push","apply","all","map"],"mappings":"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"}